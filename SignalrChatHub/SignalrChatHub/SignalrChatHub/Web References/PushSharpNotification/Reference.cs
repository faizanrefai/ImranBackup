//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace SignalrChatHub.PushSharpNotification {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MessageListSoap", Namespace="http://tempuri.org/")]
    public partial class MessageList : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback sendNoticationOperationCompleted;
        
        private System.Threading.SendOrPostCallback APNS_Send_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback Gcm_Send_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDeviceDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnreadMessageCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MessageList() {
            this.Url = global::SignalrChatHub.Properties.Settings.Default.SignalrChatHub_PushSharpNotification_MessageList;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event sendNoticationCompletedEventHandler sendNoticationCompleted;
        
        /// <remarks/>
        public event APNS_Send_SingleCompletedEventHandler APNS_Send_SingleCompleted;
        
        /// <remarks/>
        public event Gcm_Send_SingleCompletedEventHandler Gcm_Send_SingleCompleted;
        
        /// <remarks/>
        public event InsertDeviceDetailCompletedEventHandler InsertDeviceDetailCompleted;
        
        /// <remarks/>
        public event GetUnreadMessageCountCompletedEventHandler GetUnreadMessageCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendNotication", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendNotication(string UserID, string Message) {
            this.Invoke("sendNotication", new object[] {
                        UserID,
                        Message});
        }
        
        /// <remarks/>
        public void sendNoticationAsync(string UserID, string Message) {
            this.sendNoticationAsync(UserID, Message, null);
        }
        
        /// <remarks/>
        public void sendNoticationAsync(string UserID, string Message, object userState) {
            if ((this.sendNoticationOperationCompleted == null)) {
                this.sendNoticationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendNoticationOperationCompleted);
            }
            this.InvokeAsync("sendNotication", new object[] {
                        UserID,
                        Message}, this.sendNoticationOperationCompleted, userState);
        }
        
        private void OnsendNoticationOperationCompleted(object arg) {
            if ((this.sendNoticationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendNoticationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/APNS_Send_Single", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void APNS_Send_Single() {
            this.Invoke("APNS_Send_Single", new object[0]);
        }
        
        /// <remarks/>
        public void APNS_Send_SingleAsync() {
            this.APNS_Send_SingleAsync(null);
        }
        
        /// <remarks/>
        public void APNS_Send_SingleAsync(object userState) {
            if ((this.APNS_Send_SingleOperationCompleted == null)) {
                this.APNS_Send_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAPNS_Send_SingleOperationCompleted);
            }
            this.InvokeAsync("APNS_Send_Single", new object[0], this.APNS_Send_SingleOperationCompleted, userState);
        }
        
        private void OnAPNS_Send_SingleOperationCompleted(object arg) {
            if ((this.APNS_Send_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.APNS_Send_SingleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Gcm_Send_Single", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Gcm_Send_Single() {
            this.Invoke("Gcm_Send_Single", new object[0]);
        }
        
        /// <remarks/>
        public void Gcm_Send_SingleAsync() {
            this.Gcm_Send_SingleAsync(null);
        }
        
        /// <remarks/>
        public void Gcm_Send_SingleAsync(object userState) {
            if ((this.Gcm_Send_SingleOperationCompleted == null)) {
                this.Gcm_Send_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGcm_Send_SingleOperationCompleted);
            }
            this.InvokeAsync("Gcm_Send_Single", new object[0], this.Gcm_Send_SingleOperationCompleted, userState);
        }
        
        private void OnGcm_Send_SingleOperationCompleted(object arg) {
            if ((this.Gcm_Send_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Gcm_Send_SingleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDeviceDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertDeviceDetail(string UserID, string DeviceName, string DeviceTokenID) {
            object[] results = this.Invoke("InsertDeviceDetail", new object[] {
                        UserID,
                        DeviceName,
                        DeviceTokenID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDeviceDetailAsync(string UserID, string DeviceName, string DeviceTokenID) {
            this.InsertDeviceDetailAsync(UserID, DeviceName, DeviceTokenID, null);
        }
        
        /// <remarks/>
        public void InsertDeviceDetailAsync(string UserID, string DeviceName, string DeviceTokenID, object userState) {
            if ((this.InsertDeviceDetailOperationCompleted == null)) {
                this.InsertDeviceDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDeviceDetailOperationCompleted);
            }
            this.InvokeAsync("InsertDeviceDetail", new object[] {
                        UserID,
                        DeviceName,
                        DeviceTokenID}, this.InsertDeviceDetailOperationCompleted, userState);
        }
        
        private void OnInsertDeviceDetailOperationCompleted(object arg) {
            if ((this.InsertDeviceDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDeviceDetailCompleted(this, new InsertDeviceDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUnreadMessageCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUnreadMessageCount(string UserID) {
            object[] results = this.Invoke("GetUnreadMessageCount", new object[] {
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnreadMessageCountAsync(string UserID) {
            this.GetUnreadMessageCountAsync(UserID, null);
        }
        
        /// <remarks/>
        public void GetUnreadMessageCountAsync(string UserID, object userState) {
            if ((this.GetUnreadMessageCountOperationCompleted == null)) {
                this.GetUnreadMessageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnreadMessageCountOperationCompleted);
            }
            this.InvokeAsync("GetUnreadMessageCount", new object[] {
                        UserID}, this.GetUnreadMessageCountOperationCompleted, userState);
        }
        
        private void OnGetUnreadMessageCountOperationCompleted(object arg) {
            if ((this.GetUnreadMessageCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnreadMessageCountCompleted(this, new GetUnreadMessageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void sendNoticationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void APNS_Send_SingleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void Gcm_Send_SingleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void InsertDeviceDetailCompletedEventHandler(object sender, InsertDeviceDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDeviceDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDeviceDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUnreadMessageCountCompletedEventHandler(object sender, GetUnreadMessageCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnreadMessageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnreadMessageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591